import { Component, ElementRef, EventEmitter, Input, Output, NgZone, NgModule } from '@angular/core';
import 'highcharts';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class HighchartsChartComponent {
    /**
     * @param {?} el
     * @param {?} _zone
     */
    constructor(el, _zone // #75
    ) {
        this.el = el;
        this._zone = _zone;
        this.updateChange = new EventEmitter(true);
        this.chartInstance = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set options(val) {
        this.optionsValue = val;
        this.wrappedUpdateOrCreateChart();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set update(val) {
        if (val) {
            this.wrappedUpdateOrCreateChart();
            this.updateChange.emit(false); // clear the flag after update
        }
    }
    /**
     * @return {?}
     */
    wrappedUpdateOrCreateChart() {
        // #75
        if (this.runOutsideAngular) {
            this._zone.runOutsideAngular(() => {
                this.updateOrCreateChart();
            });
        }
        else {
            this.updateOrCreateChart();
        }
    }
    /**
     * @return {?}
     */
    updateOrCreateChart() {
        if (this.chart && this.chart.update) {
            this.chart.update(this.optionsValue, true, this.oneToOne || false);
        }
        else {
            this.chart = (/** @type {?} */ (this.Highcharts))[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
            // emit chart instance on init
            this.chartInstance.emit(this.chart);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // #44
        if (this.chart) { // #56
            // #56
            this.chart.destroy();
            this.chart = null;
        }
    }
}
HighchartsChartComponent.ɵfac = function HighchartsChartComponent_Factory(t) { return new (t || HighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
HighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HighchartsChartComponent, selectors: [["highcharts-chart"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne", runOutsideAngular: "runOutsideAngular" }, outputs: { updateChange: "updateChange", chartInstance: "chartInstance" }, decls: 0, vars: 0, template: function HighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
HighchartsChartComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
HighchartsChartComponent.propDecorators = {
    "Highcharts": [{ type: Input },],
    "constructorType": [{ type: Input },],
    "callbackFunction": [{ type: Input },],
    "oneToOne": [{ type: Input },],
    "runOutsideAngular": [{ type: Input },],
    "options": [{ type: Input },],
    "update": [{ type: Input },],
    "updateChange": [{ type: Output },],
    "chartInstance": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighchartsChartComponent, [{
        type: Component,
        args: [{
                selector: 'highcharts-chart',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { updateChange: [{
            type: Output
        }], chartInstance: [{
            type: Output
        }], options: [{
            type: Input
        }], update: [{
            type: Input
        }], Highcharts: [{
            type: Input
        }], constructorType: [{
            type: Input
        }], callbackFunction: [{
            type: Input
        }], oneToOne: [{
            type: Input
        }], runOutsideAngular: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HighchartsChartModule {
}
HighchartsChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighchartsChartModule });
HighchartsChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighchartsChartModule_Factory(t) { return new (t || HighchartsChartModule)(); } });
/** @nocollapse */
HighchartsChartModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighchartsChartModule, { declarations: [HighchartsChartComponent], exports: [HighchartsChartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighchartsChartModule, [{
        type: NgModule,
        args: [{
                declarations: [HighchartsChartComponent],
                exports: [HighchartsChartComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HighchartsChartModule, HighchartsChartComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGNoYXJ0cy1hbmd1bGFyLmpzIiwic291cmNlcyI6WyJuZzovaGlnaGNoYXJ0cy1hbmd1bGFyL2xpYi9oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudC50cyIsIm5nOi9oaWdoY2hhcnRzLWFuZ3VsYXIvbGliL2hpZ2hjaGFydHMtY2hhcnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQU9hLHdCQUF3QjtBQVByQyxNQU9hLHdCQUF3QjtBQUFHO2dCQXdCdEMsaEJBeEI4QztPQXlCcEMsSUFDQSxYQXpCSjtBQUF3QjtRQXdCcEIsT0FBRSxHQUFGLEVBQUUsVUFDRiw5QkF6QjRCLElBdUJ0QyxZQUNVLElBQ0E7T0FBSyxQQUFRO0VBQWIsS0FBSyxQQUNqQixRQUZZLE9BQUUsR0FBRixFQUFFO2VBUGEsSUFBSSxuQkFPZixRQUNKLFVBQUssR0FBTCxLQUFLO0dBUjBCLENBQVUsSUFBSSxDQUFDLCtCQUM5QixJQUFJLDVDQU9iLDRCQVJRLElBQUksWUFBWSxDQUFVLElBQUksQ0FBQztJQUNkLEVBQW9CLE9BUTFELGJBUk4sNkJBQTRCLElBQUksWUFBWSxFQUFvQjtBQUFFLEtBUTVEO0FBQ047Z0JBckJlLGhCQXNCUjtDQXRCZSxDQUFDLEdBQXVCLFlBQzFDLGpCQXFCeUI7RUFyQnJCLENBQUMsSEFzQkQ7T0F0QmEsR0FBRyxHQUFHLENBQUMsZEFzQlosUUF2QkQsT0FBTyxDQUFDLEdBQXVCO0FBRTFDLElBQUksQ0FBQywwQkFBMEIsL0JBRG5DLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDUyxDQUFDLERBQXRDLFFBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7QUFDdEM7QUFDRTtnQkFBYSxoQkFBTDtBQUFXLENBQUMsR0FBWSxZQUM5QixoQkFENEI7Q0FDeEIsR0FBRyxFQUFFLE5BQUE7WUFDUCxJQUFJLENBQUMsakJBQUwsUUFGUyxNQUFNLENBQUMsR0FBWTtBQUNsQyxRQUFJLElBQUks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QUM7QUFBSTtBQUFrQztBQUF5QztBQUFJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgSGlnaGNoYXJ0cyBmcm9tICdoaWdoY2hhcnRzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnaGlnaGNoYXJ0cy1jaGFydCcsXHJcbiAgdGVtcGxhdGU6ICcnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIEhpZ2hjaGFydHM6IHR5cGVvZiBIaWdoY2hhcnRzO1xyXG4gIEBJbnB1dCgpIGNvbnN0cnVjdG9yVHlwZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNhbGxiYWNrRnVuY3Rpb246IEhpZ2hjaGFydHMuQ2hhcnRDYWxsYmFja0Z1bmN0aW9uO1xyXG4gIEBJbnB1dCgpIG9uZVRvT25lOiBib29sZWFuOyAvLyAjMjBcclxuICBASW5wdXQoKSBydW5PdXRzaWRlQW5ndWxhcjogYm9vbGVhbjsgLy8gIzc1XHJcblxyXG4gIEBJbnB1dCgpIHNldCBvcHRpb25zKHZhbDogSGlnaGNoYXJ0cy5PcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnNWYWx1ZSA9IHZhbDtcclxuICAgIHRoaXMud3JhcHBlZFVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKTtcclxuICB9XHJcbiAgQElucHV0KCkgc2V0IHVwZGF0ZSh2YWw6IGJvb2xlYW4pIHtcclxuICAgIGlmICh2YWwpIHtcclxuICAgICAgdGhpcy53cmFwcGVkVXBkYXRlT3JDcmVhdGVDaGFydCgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUNoYW5nZS5lbWl0KGZhbHNlKTsgLy8gY2xlYXIgdGhlIGZsYWcgYWZ0ZXIgdXBkYXRlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgdXBkYXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPih0cnVlKTtcclxuICBAT3V0cHV0KCkgY2hhcnRJbnN0YW5jZSA9IG5ldyBFdmVudEVtaXR0ZXI8SGlnaGNoYXJ0cy5DaGFydD4oKTsgLy8gIzI2XHJcblxyXG4gIHByaXZhdGUgY2hhcnQ6IEhpZ2hjaGFydHMuQ2hhcnQ7XHJcbiAgcHJpdmF0ZSBvcHRpb25zVmFsdWU6IEhpZ2hjaGFydHMuT3B0aW9ucztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBfem9uZTogTmdab25lIC8vICM3NVxyXG4gICkge31cclxuXHJcbiAgd3JhcHBlZFVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKSB7IC8vICM3NVxyXG4gICAgaWYgKHRoaXMucnVuT3V0c2lkZUFuZ3VsYXIpIHtcclxuICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVPckNyZWF0ZUNoYXJ0KClcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKSB7XHJcbiAgICBpZiAodGhpcy5jaGFydCAmJiB0aGlzLmNoYXJ0LnVwZGF0ZSkge1xyXG4gICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSh0aGlzLm9wdGlvbnNWYWx1ZSwgdHJ1ZSwgdGhpcy5vbmVUb09uZSB8fCBmYWxzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNoYXJ0ID0gKHRoaXMuSGlnaGNoYXJ0cyBhcyBhbnkpW3RoaXMuY29uc3RydWN0b3JUeXBlIHx8ICdjaGFydCddKFxyXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICB0aGlzLm9wdGlvbnNWYWx1ZSxcclxuICAgICAgICB0aGlzLmNhbGxiYWNrRnVuY3Rpb24gfHwgbnVsbFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gZW1pdCBjaGFydCBpbnN0YW5jZSBvbiBpbml0XHJcbiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5lbWl0KHRoaXMuY2hhcnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7IC8vICM0NFxyXG4gICAgaWYgKHRoaXMuY2hhcnQpIHsgIC8vICM1NlxyXG4gICAgICB0aGlzLmNoYXJ0LmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5jaGFydCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0hpZ2hjaGFydHNDaGFydENvbXBvbmVudH0gZnJvbSAnLi9oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogWyBIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQgXSxcclxuICBleHBvcnRzOiBbIEhpZ2hjaGFydHNDaGFydENvbXBvbmVudCBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdoY2hhcnRzQ2hhcnRNb2R1bGUge31cclxuIl19